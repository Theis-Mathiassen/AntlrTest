//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\tmp\Antlr\New3\AntlrCSharp\Rogue.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RogueLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INT=7, OPERATOR=8, ID=9, 
		DIGIT=10, Types=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INT", "OPERATOR", "ID", 
		"DIGIT", "Types", "WS", "LETTER", "DIGIT_RULE", "Types_Rule"
	};


	public RogueLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RogueLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'while'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INT", "OPERATOR", "ID", "DIGIT", 
		"Types", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rogue.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RogueLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '\x62', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x39', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '<', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x6', '\r', '\x43', '\n', '\r', '\r', '\r', '\xE', '\r', 
		'\x44', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'N', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', 'Q', '\v', '\xF', '\x5', '\xF', 'S', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x61', '\n', '\x10', '\x2', '\x2', 
		'\x11', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x1B', '\x2', '\x1D', '\x2', '\x1F', '\x2', '\x3', 
		'\x2', '\x5', '\x5', '\x2', ',', '-', '/', '/', '\x31', '\x31', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x43', '|', 
		'\x2', '\x65', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '!', '\x3', '\x2', '\x2', '\x2', '\x5', '#', '\x3', '\x2', 
		'\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', '\x2', '\t', '+', '\x3', 
		'\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', '\x2', '\x2', '\r', '/', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '=', '\x3', '\x2', '\x2', '\x2', '\x17', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x42', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x1D', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '`', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '=', '\x2', 
		'\x2', '\"', '\x4', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', 'y', '\x2', 
		'\x2', '$', '%', '\a', 'j', '\x2', '\x2', '%', '&', '\a', 'k', '\x2', 
		'\x2', '&', '\'', '\a', 'n', '\x2', '\x2', '\'', '(', '\a', 'g', '\x2', 
		'\x2', '(', '\x6', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '*', '\x2', 
		'\x2', '*', '\b', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '+', '\x2', 
		'\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '}', '\x2', 
		'\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x7F', 
		'\x2', '\x2', '\x30', '\xE', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\x15', '\v', '\x2', '\x32', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\t', '\x2', '\x2', '\x2', '\x34', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x35', ':', '\x5', '\x1B', '\xE', '\x2', '\x36', '\x39', 
		'\x5', '\x1B', '\xE', '\x2', '\x37', '\x39', '\x5', '\x15', '\v', '\x2', 
		'\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', 
		'>', '\x5', '\x1D', '\xF', '\x2', '>', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x5', '\x1F', '\x10', '\x2', '@', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\t', '\x3', '\x2', '\x2', '\x42', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\b', 
		'\r', '\x2', '\x2', 'G', '\x1A', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\t', '\x4', '\x2', '\x2', 'I', '\x1C', '\x3', '\x2', '\x2', '\x2', 'J', 
		'S', '\a', '\x32', '\x2', '\x2', 'K', 'O', '\x4', '\x33', ';', '\x2', 
		'L', 'N', '\x4', '\x32', ';', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'J', '\x3', '\x2', '\x2', '\x2', 
		'R', 'K', '\x3', '\x2', '\x2', '\x2', 'S', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\x65', '\x2', '\x2', 'U', 'V', '\a', 'j', '\x2', 
		'\x2', 'V', 'W', '\a', '\x63', '\x2', '\x2', 'W', '\x61', '\a', 't', '\x2', 
		'\x2', 'X', 'Y', '\a', 'k', '\x2', '\x2', 'Y', 'Z', '\a', 'p', '\x2', 
		'\x2', 'Z', '\x61', '\a', 'v', '\x2', '\x2', '[', '\\', '\a', 'h', '\x2', 
		'\x2', '\\', ']', '\a', 'n', '\x2', '\x2', ']', '^', '\a', 'q', '\x2', 
		'\x2', '^', '_', '\a', '\x63', '\x2', '\x2', '_', '\x61', '\a', 'v', '\x2', 
		'\x2', '`', 'T', '\x3', '\x2', '\x2', '\x2', '`', 'X', '\x3', '\x2', '\x2', 
		'\x2', '`', '[', '\x3', '\x2', '\x2', '\x2', '\x61', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x2', '\x38', ':', '\x44', 'O', 'R', '`', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
