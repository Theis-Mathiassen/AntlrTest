//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\tmp\Antlr\New3\AntlrCSharp\Rogue.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RogueParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INT=7, OPERATOR=8, ID=9, 
		DIGIT=10, Types=11, WS=12;
	public const int
		RULE_calc = 0, RULE_statements = 1, RULE_statement = 2, RULE_stat = 3, 
		RULE_block = 4, RULE_identifierDecleration = 5, RULE_expression = 6, RULE_auxillary = 7, 
		RULE_type = 8;
	public static readonly string[] ruleNames = {
		"calc", "statements", "statement", "stat", "block", "identifierDecleration", 
		"expression", "auxillary", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'while'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INT", "OPERATOR", "ID", "DIGIT", 
		"Types", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rogue.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RogueParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RogueParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RogueParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CalcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RogueParser.Eof, 0); }
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		CalcContext _localctx = new CalcContext(Context, State);
		EnterRule(_localctx, 0, RULE_calc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			statements();
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				statement();
				State = 23;
				statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			expression();
			State = 28;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				Match(T__1);
				State = 31;
				Match(T__2);
				State = 32;
				expression();
				State = 33;
				Match(T__3);
				State = 34;
				stat();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(T__4);
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__4) {
				{
				{
				State = 40;
				stat();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierDeclerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RogueParser.ID, 0); }
		public IdentifierDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierDecleration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierDeclerationContext identifierDecleration() {
		IdentifierDeclerationContext _localctx = new IdentifierDeclerationContext(Context, State);
		EnterRule(_localctx, 10, RULE_identifierDecleration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			type();
			State = 49;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(RogueParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NormalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		public IntExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new NormalExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(INT);
				State = 52;
				Match(OPERATOR);
				State = 53;
				expression();
				}
				break;
			case 2:
				_localctx = new IntExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuxillaryContext : ParserRuleContext {
		public AuxillaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auxillary; } }
	 
		public AuxillaryContext() { }
		public virtual void CopyFrom(AuxillaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntAuxContext : AuxillaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		public IntAuxContext(AuxillaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAux(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAuxContext : AuxillaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAuxContext(AuxillaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAux(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuxillaryContext auxillary() {
		AuxillaryContext _localctx = new AuxillaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_auxillary);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new IntAuxContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(INT);
				}
				break;
			case 2:
				_localctx = new ExprAuxContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Types() { return GetToken(RogueParser.Types, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(Types);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\x42', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '(', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', ',', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '/', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', ':', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'>', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x2', 
		'\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', 
		'\x2', '\x2', '=', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\'', '\x3', '\x2', '\x2', '\x2', '\n', ')', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x32', '\x3', '\x2', '\x2', '\x2', '\xE', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '=', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x16', '\a', '\x2', '\x2', '\x3', '\x16', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x18', 
		'\x19', '\x5', '\x6', '\x4', '\x2', '\x19', '\x1A', '\x5', '\x4', '\x3', 
		'\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\xE', '\b', 
		'\x2', '\x1E', '\x1F', '\a', '\x3', '\x2', '\x2', '\x1F', '\a', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\"', '\a', 
		'\x5', '\x2', '\x2', '\"', '#', '\x5', '\xE', '\b', '\x2', '#', '$', '\a', 
		'\x6', '\x2', '\x2', '$', '%', '\x5', '\b', '\x5', '\x2', '%', '(', '\x3', 
		'\x2', '\x2', '\x2', '&', '(', '\x5', '\n', '\x6', '\x2', '\'', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '\t', 
		'\x3', '\x2', '\x2', '\x2', ')', '-', '\a', '\a', '\x2', '\x2', '*', ',', 
		'\x5', '\b', '\x5', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', 
		'/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\b', 
		'\x2', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\x5', '\x12', '\n', '\x2', '\x33', '\x34', '\a', '\v', '\x2', '\x2', 
		'\x34', '\r', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\t', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\n', '\x2', '\x2', '\x37', ':', '\x5', 
		'\xE', '\b', '\x2', '\x38', ':', '\a', '\t', '\x2', '\x2', '\x39', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '>', '\a', '\t', '\x2', '\x2', 
		'<', '>', '\x5', '\xE', '\b', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\a', '\r', '\x2', '\x2', '@', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\a', '\x1B', '\'', '-', '\x39', '=',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
