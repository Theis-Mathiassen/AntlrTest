//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/kali/Documents/AntlrProject/Test/AntlrTest/AntlrCSharp/Rogue.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RogueParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INT=8, OPERATOR=9, 
		CompareOperator=10, LogicalUnaryOperator=11, LogicalBinaryOperator=12, 
		ID=13, DIGIT=14, Types=15, WS=16;
	public const int
		RULE_calc = 0, RULE_statements = 1, RULE_statement = 2, RULE_stat = 3, 
		RULE_block = 4, RULE_lexpr = 5, RULE_identifierDecleration = 6, RULE_expression = 7, 
		RULE_auxillary = 8, RULE_type = 9;
	public static readonly string[] ruleNames = {
		"calc", "statements", "statement", "stat", "block", "lexpr", "identifierDecleration", 
		"expression", "auxillary", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'while'", "'('", "')'", "'if'", "'{'", "'}'", null, null, 
		null, "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INT", "OPERATOR", "CompareOperator", 
		"LogicalUnaryOperator", "LogicalBinaryOperator", "ID", "DIGIT", "Types", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rogue.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RogueParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RogueParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RogueParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CalcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RogueParser.Eof, 0); }
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		CalcContext _localctx = new CalcContext(Context, State);
		EnterRule(_localctx, 0, RULE_calc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			block();
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24;
				statement();
				State = 25;
				statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			expression();
			State = 30;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexprContext lexpr() {
			return GetRuleContext<LexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				Match(T__1);
				State = 33;
				Match(T__2);
				State = 34;
				lexpr(0);
				State = 35;
				Match(T__3);
				State = 36;
				block();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				Match(T__4);
				State = 39;
				Match(T__2);
				State = 40;
				lexpr(0);
				State = 41;
				Match(T__3);
				State = 42;
				block();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				block();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				expression();
				State = 46;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__5);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__5) | (1L << INT))) != 0)) {
				{
				{
				State = 51;
				stat();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompareOperator() { return GetToken(RogueParser.CompareOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalUnaryOperator() { return GetToken(RogueParser.LogicalUnaryOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexprContext[] lexpr() {
			return GetRuleContexts<LexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexprContext lexpr(int i) {
			return GetRuleContext<LexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalBinaryOperator() { return GetToken(RogueParser.LogicalBinaryOperator, 0); }
		public LexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexprContext lexpr() {
		return lexpr(0);
	}

	private LexprContext lexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LexprContext _localctx = new LexprContext(Context, _parentState);
		LexprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_lexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 60;
				expression();
				State = 61;
				Match(CompareOperator);
				State = 62;
				expression();
				}
				break;
			case LogicalUnaryOperator:
				{
				State = 64;
				Match(LogicalUnaryOperator);
				State = 65;
				lexpr(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 73;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_lexpr);
					State = 68;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 69;
					Match(LogicalBinaryOperator);
					State = 70;
					lexpr(2);
					}
					} 
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierDeclerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RogueParser.ID, 0); }
		public IdentifierDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierDecleration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierDeclerationContext identifierDecleration() {
		IdentifierDeclerationContext _localctx = new IdentifierDeclerationContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifierDecleration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			type();
			State = 77;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(RogueParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NormalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		public IntExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new NormalExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				Match(INT);
				State = 80;
				Match(OPERATOR);
				State = 81;
				expression();
				}
				break;
			case 2:
				_localctx = new IntExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuxillaryContext : ParserRuleContext {
		public AuxillaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auxillary; } }
	 
		public AuxillaryContext() { }
		public virtual void CopyFrom(AuxillaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntAuxContext : AuxillaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RogueParser.INT, 0); }
		public IntAuxContext(AuxillaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAux(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAuxContext : AuxillaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAuxContext(AuxillaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAux(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuxillaryContext auxillary() {
		AuxillaryContext _localctx = new AuxillaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_auxillary);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new IntAuxContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				Match(INT);
				}
				break;
			case 2:
				_localctx = new ExprAuxContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Types() { return GetToken(RogueParser.Types, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRogueVisitor<TResult> typedVisitor = visitor as IRogueVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(Types);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return lexpr_sempred((LexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool lexpr_sempred(LexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '^', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x33', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x37', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', ':', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x45', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'M', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'V', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', 'Z', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x2', '\x3', '\f', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', '\\', '\x2', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x34', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x12', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '[', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\n', 
		'\x6', '\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1E', '\x5', '\x6', '\x4', '\x2', 
		'\x1A', '\x1B', '\x5', '\x6', '\x4', '\x2', '\x1B', '\x1C', '\x5', '\x4', 
		'\x3', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x5', '\x10', 
		'\t', '\x2', ' ', '!', '\a', '\x3', '\x2', '\x2', '!', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '\x4', '\x2', '\x2', '#', '$', '\a', '\x5', 
		'\x2', '\x2', '$', '%', '\x5', '\f', '\a', '\x2', '%', '&', '\a', '\x6', 
		'\x2', '\x2', '&', '\'', '\x5', '\n', '\x6', '\x2', '\'', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\a', '\a', '\x2', '\x2', ')', '*', '\a', 
		'\x5', '\x2', '\x2', '*', '+', '\x5', '\f', '\a', '\x2', '+', ',', '\a', 
		'\x6', '\x2', '\x2', ',', '-', '\x5', '\n', '\x6', '\x2', '-', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x33', '\x5', '\n', '\x6', '\x2', '/', 
		'\x30', '\x5', '\x10', '\t', '\x2', '\x30', '\x31', '\a', '\x3', '\x2', 
		'\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '(', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x32', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\t', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', '\a', '\b', 
		'\x2', '\x2', '\x35', '\x37', '\x5', '\b', '\x5', '\x2', '\x36', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\t', '\x2', '\x2', '<', '\v', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\b', '\a', '\x1', '\x2', '>', '?', '\x5', '\x10', 
		'\t', '\x2', '?', '@', '\a', '\f', '\x2', '\x2', '@', '\x41', '\x5', '\x10', 
		'\t', '\x2', '\x41', '\x45', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\r', '\x2', '\x2', '\x43', '\x45', '\x5', '\f', '\a', '\x4', '\x44', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'K', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\f', '\x3', 
		'\x2', '\x2', 'G', 'H', '\a', '\xE', '\x2', '\x2', 'H', 'J', '\x5', '\f', 
		'\a', '\x4', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x14', '\v', '\x2', 'O', 
		'P', '\a', '\xF', '\x2', '\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\n', '\x2', '\x2', 'R', 'S', '\a', '\v', '\x2', '\x2', 
		'S', 'V', '\x5', '\x10', '\t', '\x2', 'T', 'V', '\a', '\n', '\x2', '\x2', 
		'U', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x11', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\a', '\n', '\x2', 
		'\x2', 'X', 'Z', '\x5', '\x10', '\t', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\x11', '\x2', '\x2', '\\', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x1D', '\x32', '\x38', '\x44', 'K', 'U', 'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
